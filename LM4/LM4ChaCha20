package main

import (
	"crypto/cipher"
	"fmt"
	"golang.org/x/crypto/chacha20"
)

func main() {
	plaintext := getUserInput()
	key, nonce := generateKeyAndNonce()
	ciphertext := encrypt(plaintext, key, nonce)
	decryptedText := decrypt(ciphertext, key, nonce)
	fmt.Println("Original text:", plaintext)
	fmt.Println("Encrypted text:", ciphertext)
	fmt.Println("Decrypted text:", decryptedText)
}

func getUserInput() string {
	var input string
	fmt.Println("Enter the string you want to encrypt:")
	fmt.Scanln(&input)
	return input
}

func generateKeyAndNonce() ([]byte, []byte) {
	key := make([]byte, chacha20.KeySize)
	nonce := make([]byte, chacha20.NonceSize)
	_, err := rand.Read(key)
	if err != nil {
		panic(err)
	}
	_, err = rand.Read(nonce)
	if err != nil {
		panic(err)
	}
	return key, nonce
}

func encrypt(plaintext string, key []byte, nonce []byte) []byte {
	block, err := chacha20.NewUnauthenticatedCipher(key, nonce)
	if err != nil {
		panic(err)
	}
	ciphertext := make([]byte, len(plaintext))
	block.XORKeyStream(ciphertext, []byte(plaintext))
	return ciphertext
}

func decrypt(ciphertext []byte, key []byte, nonce []byte) string {
	block, err := chacha20.NewUnauthenticatedCipher(key, nonce)
	if err != nil {
		panic(err)
	}
	plaintext := make([]byte, len(ciphertext))
	block.XORKeyStream(plaintext, ciphertext)
	return string(plaintext)
}
